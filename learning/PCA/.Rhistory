a<- foreach(i=1:5, .packages=p) %dopar% {
myconn <-odbcConnect("SaScoringCube", uid="readonlyuser", pwd="readonlyuser")
#snapshots ='select snapshotkey from dimsnapshot'
#random_where <-sqlQuery(myconn, snapshots);
#random_where <-data.table(random_where)
#query = paste(query, random_where[sample(.N,1)], sep="")
#query
sample(.N,1)
#result <-sqlQuery(myconn, query);
#result <-data.table(result)
#result
}
stopCluster(cl)
a
p = c('RODBC','data.table')
cl <- makeCluster(4)
registerDoParallel(cl)
a<- foreach(i=1:5, .packages=p) %dopar% {
myconn <-odbcConnect("SaScoringCube", uid="readonlyuser", pwd="readonlyuser")
#snapshots ='select snapshotkey from dimsnapshot'
#random_where <-sqlQuery(myconn, snapshots);
#random_where <-data.table(random_where)
#query = paste(query, random_where[sample(.N,1)], sep="")
#query
random_where
#result <-sqlQuery(myconn, query);
#result <-data.table(result)
#result
}
stopCluster(cl)
p = c('RODBC','data.table')
cl <- makeCluster(4)
registerDoParallel(cl)
a<- foreach(i=1:5, .packages=p) %dopar% {
myconn <-odbcConnect("SaScoringCube", uid="readonlyuser", pwd="readonlyuser")
#snapshots ='select snapshotkey from dimsnapshot'
#random_where <-sqlQuery(myconn, snapshots);
#random_where <-data.table(random_where)
#query = paste(query, random_where[sample(.N,1)], sep="")
#query
a<-random_where[sample(.N,1)]
a
#result <-sqlQuery(myconn, query);
#result <-data.table(result)
#result
}
stopCluster(cl)
a
key<-random_where[sample(.N,1)]
p = c('RODBC','data.table')
cl <- makeCluster(4)
registerDoParallel(cl)
a<- foreach(i=1:5, .packages=p) %dopar% {
myconn <-odbcConnect("SaScoringCube", uid="readonlyuser", pwd="readonlyuser")
#snapshots ='select snapshotkey from dimsnapshot'
#random_where <-sqlQuery(myconn, snapshots);
#random_where <-data.table(random_where)
#query = paste(query, random_where[sample(.N,1)], sep="")
#query
key<-random_where[sample(.N,1)]
query = paste(query, key, sep="")
query
#result <-sqlQuery(myconn, query);
#result <-data.table(result)
#result
}
stopCluster(cl)
a
p = c('RODBC','data.table')
cl <- makeCluster(4)
registerDoParallel(cl)
a<- foreach(i=1:5, .packages=p) %dopar% {
myconn <-odbcConnect("SaScoringCube", uid="readonlyuser", pwd="readonlyuser")
#snapshots ='select snapshotkey from dimsnapshot'
#random_where <-sqlQuery(myconn, snapshots);
#random_where <-data.table(random_where)
#query = paste(query, random_where[sample(.N,1)], sep="")
#query
key<-random_where[sample(.N,1)]
key
##query = paste(query, key, sep="")
##query
#result <-sqlQuery(myconn, query);
#result <-data.table(result)
#result
}
stopCluster(cl)
a
p = c('RODBC','data.table')
cl <- makeCluster(4)
registerDoParallel(cl)
a<- foreach(i=1:5, .packages=p) %dopar% {
myconn <-odbcConnect("SaScoringCube", uid="readonlyuser", pwd="readonlyuser")
#snapshots ='select snapshotkey from dimsnapshot'
#random_where <-sqlQuery(myconn, snapshots);
#random_where <-data.table(random_where)
#query = paste(query, random_where[sample(.N,1)], sep="")
#query
key<-random_where[sample(.N,1)]
key
##query = paste(query, key, sep="")
##query
result <-sqlQuery(myconn, query);
#result <-data.table(result)
#result
}
stopCluster(cl)
a
query
query ="select * from dimsnapshot where snapshotkey = "
query
query + key
paste(query, key, sep="")
p = c('RODBC','data.table')
cl <- makeCluster(4)
registerDoParallel(cl)
a<- foreach(i=1:5, .packages=p) %dopar% {
myconn <-odbcConnect("SaScoringCube", uid="readonlyuser", pwd="readonlyuser")
#snapshots ='select snapshotkey from dimsnapshot'
#random_where <-sqlQuery(myconn, snapshots);
#random_where <-data.table(random_where)
#query = paste(query, random_where[sample(.N,1)], sep="")
#query
key<-random_where[sample(.N,1)]
key
##query = paste(query, key, sep="")
##query
result <-sqlQuery(myconn, paste(query, key, sep=""));
#result <-data.table(result)
#result
}
stopCluster(cl)
a
p = c('RODBC','data.table')
cl <- makeCluster(4)
registerDoParallel(cl)
a<- foreach(i=1:50, .packages=p) %dopar% {
myconn <-odbcConnect("SaScoringCube", uid="readonlyuser", pwd="readonlyuser")
key<-random_where[sample(.N,1)]
key
##query = paste(query, key, sep="")
##query
result <-sqlQuery(myconn, paste(query, key, sep=""));
#result <-data.table(result)
#result
}
stopCluster(cl)
a
a
query ="set query group = 'read_perf_test'; select * from dimsnapshot where snapshotkey = "
p = c('RODBC','data.table')
cl <- makeCluster(4)
registerDoParallel(cl)
a<- foreach(i=1:50, .packages=p) %dopar% {
myconn <-odbcConnect("SaScoringCube", uid="readonlyuser", pwd="readonlyuser")
key<-random_where[sample(.N,1)]
key
##query = paste(query, key, sep="")
##query
result <-sqlQuery(myconn, paste(query, key, sep=""));
#result <-data.table(result)
#result
}
stopCluster(cl)
p = c('RODBC','data.table')
cl <- makeCluster(4)
registerDoParallel(cl)
a<- foreach(i=1:50, .packages=p) %dopar% {
myconn <-odbcConnect("SaScoringCube", uid="readonlyuser", pwd="readonlyuser")
key<-random_where[sample(.N,1)]
key
##query = paste(query, key, sep="")
##query
result <-sqlQuery(myconn, paste(query, key, sep=""));
#result <-data.table(result)
#result
}
stopCluster(cl)
a
myconn <-odbcConnect("SaScoringCube", uid="readonlyuser", pwd="readonlyuser")
snapshots ='select snapshotkey from dimsnapshot'
random_where <-sqlQuery(myconn, snapshots);
random_where <-data.table(random_where)
query ="set query group = ''read_perf_test''; select * from dimsnapshot where snapshotkey = "
p = c('RODBC','data.table')
cl <- makeCluster(4)
registerDoParallel(cl)
a<- foreach(i=1:50, .packages=p) %dopar% {
myconn <-odbcConnect("SaScoringCube", uid="readonlyuser", pwd="readonlyuser")
key<-random_where[sample(.N,1)]
key
##query = paste(query, key, sep="")
##query
result <-sqlQuery(myconn, paste(query, key, sep=""));
#result <-data.table(result)
#result
}
stopCluster(cl)
a
myconn <-odbcConnect("SaScoringCube", uid="readonlyuser", pwd="readonlyuser")
snapshots ='select snapshotkey from dimsnapshot'
random_where <-sqlQuery(myconn, snapshots);
random_where <-data.table(random_where)
query ="set query group = '''read_perf_test'''; select * from dimsnapshot where snapshotkey = "
p = c('RODBC','data.table')
cl <- makeCluster(4)
registerDoParallel(cl)
a<- foreach(i=1:50, .packages=p) %dopar% {
myconn <-odbcConnect("SaScoringCube", uid="readonlyuser", pwd="readonlyuser")
key<-random_where[sample(.N,1)]
key
##query = paste(query, key, sep="")
##query
result <-sqlQuery(myconn, paste(query, key, sep=""));
#result <-data.table(result)
#result
}
stopCluster(cl)
a
myconn <-odbcConnect("SaScoringCube", uid="readonlyuser", pwd="readonlyuser")
snapshots ='select snapshotkey from dimsnapshot'
random_where <-sqlQuery(myconn, snapshots);
random_where <-data.table(random_where)
query ="select * from dimsnapshot where snapshotkey = "
p = c('RODBC','data.table')
cl <- makeCluster(4)
registerDoParallel(cl)
a<- foreach(i=1:50, .packages=p) %dopar% {
myconn <-odbcConnect("SaScoringCube", uid="readonlyuser", pwd="readonlyuser")
key<-random_where[sample(.N,1)]
key
##query = paste(query, key, sep="")
##query
result <-sqlQuery(myconn, paste(query, key, sep=""));
#result <-data.table(result)
#result
}
stopCluster(cl)
a
a
stopCluster(cl)
myconn <-odbcConnect("SaScoringCube", uid="readonlyuser", pwd="readonlyuser")
snapshots ='select snapshotkey from dimsnapshot'
random_where <-sqlQuery(myconn, snapshots);
random_where <-data.table(random_where)
query =" set query_group = \'foo\'; select * from dimsnapshot where snapshotkey = "
p = c('RODBC','data.table')
cl <- makeCluster(4)
registerDoParallel(cl)
a<- foreach(i=1:5, .packages=p) %dopar% {
myconn <-odbcConnect("SaScoringCube", uid="readonlyuser", pwd="readonlyuser")
key<-random_where[sample(.N,1)]
key
##query = paste(query, key, sep="")
##query
result <-sqlQuery(myconn, paste(query, key, sep=""));
#result <-data.table(result)
#result
}
stopCluster(cl)
a
a
myconn <-odbcConnect("SaScoringCube", uid="readonlyuser", pwd="readonlyuser")
snapshots ='select snapshotkey from dimsnapshot'
sqlQuery(myconn, snapshots);
myconn <-odbcConnect("SaScoringCube", uid="readonlyuser", pwd="readonlyuser")
snapshots ='set query group = foo; select snapshotkey from dimsnapshot'
sqlQuery(myconn, snapshots);
setwd("C:/git/mytools/learning/PCA/")
df2 <- read.csv ("cleaned.csv")
df2 <- df2[,c("income_per_person", "life_expectancy")]
df2 <- df2[order(df2$income_per_person),]
x =df2[,1]
y =df2[,2]
plot (x,y)#, xlim=c(6,12), ylim=c(30,90))
fit_x<- lm(y ~ x)
lines(x, predict(fit_x), col="red")
plot (x,y)
fit_x<- lm(y ~ x)
lines(x, predict(fit_x), col="red")
xyNorm <- cbind(x=df2[,1]-mean(df2[,1]), y=df2[,2]-mean(df2[,2]))
xyNorm
plot(xyNorm)
pca<-prcomp(xyNorm,center = FALSE,scale = FALSE) #
lines(xyNorm[,1], pca[2]$rotation[2,1]/pca[2]$rotation[1,1] * xyNorm[,1])
lines(xyNorm[,1], pca[2]$rotation[2,2]/pca[2]$rotation[1,2] * xyNorm[,1])
plot(x,y)
lines(x, (eigenVectors[2,1]/eigenVectors[1,1] * xyNorm[,1]) + mean(y))
plot(x,y)
lines(x, (eigenVectors[2,1]/eigenVectors[1,1] * xyNorm[,1]) + mean(y))
# what if we bring back our other two regressions?
lines(x, predict(fit_x), col="red")
plot(x,y)
lines(x, (eigenVectors[2,1]/eigenVectors[1,1] * xyNorm[,1]) + mean(y))
lines(x, predict(fit_x), col="red")
summary(pca)
plot(xyNorm)
lines(xyNorm[,1], pca[2]$rotation[2,1]/pca[2]$rotation[1,1] * xyNorm[,1])
lines(xyNorm[,1], pca[2]$rotation[2,2]/pca[2]$rotation[1,2] * xyNorm[,1])
plot(xyNorm, xlim=c(-5,5))
lines(xyNorm[,1], pca[2]$rotation[2,1]/pca[2]$rotation[1,1] * xyNorm[,1])
lines(xyNorm[,1], pca[2]$rotation[2,2]/pca[2]$rotation[1,2] * xyNorm[,1])
plot(xyNorm, xlim=c(-5,5), ylim = c(-25,20))
plot(xyNorm, xlim=c(-5,5), ylim = c(-30,20))
pca<-prcomp(xyNorm,center = FALSE,scale = FALSE) #
#summary(pca)
#pca[2]
lines(xyNorm[,1], pca[2]$rotation[2,1]/pca[2]$rotation[1,1] * xyNorm[,1])
lines(xyNorm[,1], pca[2]$rotation[2,2]/pca[2]$rotation[1,2] * xyNorm[,1])
setwd("C:/git/mytools/learning/PCA/")
df2 <- read.csv ("cleaned.csv")
df2 <- df2[,c("income_per_person", "life_expectancy")]
df2 <- df2[order(df2$income_per_person),]
x =df2[,1]
y =df2[,2]
plot (x,y)
fit_x<- lm(y ~ x)
lines(x, predict(fit_x), col="red")
xyNorm <- cbind(x=(df2[,1]-mean(df2[,1])/sd(df2[,1]), y=(df2[,2]-mean(df2[,2]))df2[,2] )
xyNorm <- cbind(x=(df2[,1]-mean(df2[,1])/sd(df2[,1]), y=(df2[,2]-mean(df2[,2])/sd(df2[,2]))
xyNorm <- cbind(x= (df2[,1]-mean(df2[,1]))/sd(df2[,1]), y= (df2[,2]-mean(df2[,2]))/sd(df2[,2]) )
xyNorm
plot(xyNorm) #, xlim=c(-5,5), ylim = c(-30,20))
pca<-prcomp(xyNorm,center = FALSE,scale = FALSE) #
pca
summary(pca)
lines(xyNorm[,1], pca[2]$rotation[2,1]/pca[2]$rotation[1,1] * xyNorm[,1])
lines(xyNorm[,1], pca[2]$rotation[2,2]/pca[2]$rotation[1,2] * xyNorm[,1])
pca[2]$rotation[2,1]
pca[2]$rotation[1,1]
pca[2]$rotation[2,1]/pca[2]$rotation[1,1]
pca[2]$rotation[2,2]
pca[2]$rotation[1,2]
pca[2]$rotation[2,2]/pca[2]$rotation[1,2]
cbind(x= (x-mean(x))/sd(x), y= (y-mean(y))/sd(y) )
xyNorm
set.seed(2)
x <- 1:100
y <- 20 + 3 * x
e <- rnorm(100, 0, 60)
y <- 20 + 3 * x + e
plot(x,y)
xyNorm <- cbind(x=x-mean(x), y=y-mean(y))
xyCov <- cov(xyNorm)
eigenValues <- eigen(xyCov)$values
eigenVectors <- eigen(xyCov)$vectors
eigenValues
eigenVectors
df2
setwd("C:/git/mytools/learning/PCA/")
df2 <- read.csv ("cleaned.csv")
df2 <- df2[,c("income_per_person", "life_expectancy")]
df2 <- df2[order(df2$income_per_person),]
x =df2[,1]
y =df2[,2]
plot (x,y)
fit_x<- lm(y ~ x)
lines(x, predict(fit_x), col="red")
xyNormMean <- cbind(x=x-mean(x), y=y-mean(y)) # center
xyNormSD <- cbind(x= (x-mean(x))/sd(x), y= (y-mean(y))/sd(y) ) #center and scale
xyNormMean
xyNormSD
xyCov <- cov(xyNorm)
eigenValues <- eigen(xyCov)$values
eigenVectors <- eigen(xyCov)$vectors
plot(xyNorm)
lines(xyNorm[,1], pca[2]$rotation[2,1]/pca[2]$rotation[1,1] * xyNorm[,1])
lines(xyNorm[,1], pca[2]$rotation[2,2]/pca[2]$rotation[1,2] * xyNorm[,1])
plot(xyNorm)
lines(xyNorm[,1], eigenVectors[2,1]/eigenVectors[1,1] * xyNorm[x])
lines(xyNorm[,1], eigenVectors[2,2]/eigenVectors[1,2] * xyNorm[x])
lines(xyNorm[,1], eigenVectors[2,1]/eigenVectors[1,1] * xyNorm[,1])
lines(xyNorm[,1], eigenVectors[2,2]/eigenVectors[1,2] * xyNorm[,1])
eigenValues
eigenVectors
eigenVectors[2,1]/eigenVectors[1,1]
lines(xyNorm[,1], pca[2]$rotation[2,1]/pca[2]$rotation[1,1] * xyNorm[,1])
lines(xyNorm[,1], pca[2]$rotation[2,2]/pca[2]$rotation[1,2] * xyNorm[,1])
df2 <- df2[,c("income_per_person", "life_expectancy")]
df2 <- df2[order(df2$income_per_person),]
x =df2[,1]
y =df2[,2]
plot (x,y)
fit_x<- lm(y ~ x)
lines(x, predict(fit_x), col="red")
#pca<-prcomp(df2,center = TRUE,scale = FALSE)
#plot(x,y)
#lines(x, pca[2]$rotation[2,1]/pca[2]$rotation[1,1]  * x)
xyNorm <- cbind(x=df2[,1]-mean(df2[,1]), y=df2[,2]-mean(df2[,2]))
#xyCov <- cov(xyNorm)
#eigenValues <- eigen(xyCov)$values
#eigenVectors <- eigen(xyCov)$vectors
plot(xyNorm, xlim=c(-5,5), ylim = c(-30,20))
pca<-prcomp(xyNorm,center = FALSE,scale = FALSE) #
#summary(pca)
#pca[2]
lines(xyNorm[,1], pca[2]$rotation[2,1]/pca[2]$rotation[1,1] * xyNorm[,1])
lines(xyNorm[,1], pca[2]$rotation[2,2]/pca[2]$rotation[1,2] * xyNorm[,1])
pca[2]$rotation[2,1]/pca[2]$rotation[1,1]
pca[2]$rotation[2,2]/pca[2]$rotation[1,2]
pca[2]
eigenVectors[2,1]/eigenVectors[1,1]
eigenVectors
df2 <- read.csv ("cleaned.csv")
df2 <- df2[,c("income_per_person", "life_expectancy")]
df2 <- df2[order(df2$income_per_person),]
x =df2[,1]
y =df2[,2]
plot (x,y)
fit_x<- lm(y ~ x)
lines(x, predict(fit_x), col="red")
#pca<-prcomp(df2,center = TRUE,scale = FALSE)
#plot(x,y)
#lines(x, pca[2]$rotation[2,1]/pca[2]$rotation[1,1]  * x)
xyNorm <- cbind(x=df2[,1]-mean(df2[,1]), y=df2[,2]-mean(df2[,2]))
#xyCov <- cov(xyNorm)
#eigenValues <- eigen(xyCov)$values
#eigenVectors <- eigen(xyCov)$vectors
plot(xyNorm, xlim=c(-5,5), ylim = c(-30,20))
pca<-prcomp(xyNorm,center = FALSE,scale = FALSE) #
pca[2]
lines(xyNorm[,1], pca[2]$rotation[2,1]/pca[2]$rotation[1,1] * xyNorm[,1])
lines(xyNorm[,1], pca[2]$rotation[2,2]/pca[2]$rotation[1,2] * xyNorm[,1])
summary(pca)
pca[2]
xyCov <- cov(xyNorm)
eigenValues <- eigen(xyCov)$values
eigenVectors <- eigen(xyCov)$vectors
plot(xyNorm)
eigenVectors
eigenValues
lines(xyNorm[,1], eigenVectors[2,1]/eigenVectors[1,1] * xyNorm[,1])
lines(xyNorm[,1], eigenVectors[2,2]/eigenVectors[1,2] * xyNorm[,1])
eigenVectors[2,1]/eigenVectors[1,1]
pca[2]$rotation[2,1]/pca[2]$rotation[1,1]
lines(xyNorm[,1], eigenVectors[2,2]/eigenVectors[1,2] * xyNorm[,1])
plot(x,y)
lines(x, (eigenVectors[2,1]/eigenVectors[1,1] * xyNorm[,1]) + mean(y))
lines(x, predict(fit_x), col="red")
#DATA centered and scaled:
xyCov <- cov(xyNormSD)
eigenValues <- eigen(xyCov)$values
eigenVectors <- eigen(xyCov)$vectors
plot(xyNormSD)
lines(xyNormSD[,1], eigenVectors[2,1]/eigenVectors[1,1] * xyNormSD[,1])
lines(xyNormSD[,1], eigenVectors[2,2]/eigenVectors[1,2] * xyNormSD[,1])
xyCovSD <- cov(xyNormSD)
eigenValuesSD <- eigen(xyCovSD)$values
eigenVectorsSD <- eigen(xyCovSD)$vectors
plot(xyNormSD)
lines(xyNormSD[,1], eigenVectorsSD[2,1]/eigenVectorsSD[1,1] * xyNormSD[,1])
lines(xyNormSD[,1], eigenVectorsSD[2,2]/eigenVectorsSD[1,2] * xyNormSD[,1])
eigenVectorsSD
eigenVectors
setwd("C:/git/mytools/learning/PCA/")
df2 <- read.csv ("cleaned.csv")
df2 <- df2[,c("income_per_person", "life_expectancy")]
df2 <- df2[order(df2$income_per_person),]
x =df2[,1]
y =df2[,2]
plot (x,y)
fit_x<- lm(y ~ x)
lines(x, predict(fit_x), col="red")
xyNormMean <- cbind(x=x-mean(x), y=y-mean(y)) # center
xyNormSD <- cbind(x= (x-mean(x))/sd(x), y= (y-mean(y))/sd(y) ) #center and scale
xyNormMean
xyNormSD
xyCov <- cov(xyNormMean)
eigenValues <- eigen(xyCov)$values
eigenVectors <- eigen(xyCov)$vectors
xyCovSD <- cov(xyNormSD)
eigenValuesSD <- eigen(xyCovSD)$values
eigenVectorsSD <- eigen(xyCovSD)$vectors
eigenVectorsSD
eigenVectors
eigenValues
eigenValuesSD
setwd("C:/git/mytools/learning/PCA/")
df2 <- read.csv ("cleaned.csv")
df2 <- df2[,c("income_per_person", "life_expectancy")]
df2 <- df2[order(df2$income_per_person),]
x =df2[,1]
y =df2[,2]
plot (x,y)
fit_x<- lm(y ~ x)
lines(x, predict(fit_x), col="red")
xyNormMean <- cbind(x=x-mean(x), y=y-mean(y)) # center
xyNormSD <- cbind(x= (x-mean(x))/sd(x), y= (y-mean(y))/sd(y) ) #center and scale
#DATA centered:
xyCov <- cov(xyNormMean)
eigenValues <- eigen(xyCov)$values
eigenVectors <- eigen(xyCov)$vectors
plot(xyNormMean)
lines(xyNormMean[,1], eigenVectors[2,1]/eigenVectors[1,1] * xyNormMean[,1])
lines(xyNormMean[,1], eigenVectors[2,2]/eigenVectors[1,2] * xyNormMean[,1])
setwd("C:/git/mytools/learning/PCA/")
df2 <- read.csv ("cleaned.csv")
df2 <- df2[,c("income_per_person", "life_expectancy")]
df2 <- df2[order(df2$income_per_person),]
x =df2[,1]
y =df2[,2]
plot (x,y)
fit_x<- lm(y ~ x)
lines(x, predict(fit_x), col="red")
xyNormMean <- cbind(x=x-mean(x), y=y-mean(y)) # center
xyNormSD <- cbind(x= (x-mean(x))/sd(x), y= (y-mean(y))/sd(y) ) #center and scale
xyCovSD <- cov(xyNormSD)
eigenValuesSD <- eigen(xyCovSD)$values
eigenVectorsSD <- eigen(xyCovSD)$vectors
plot(xyNormSD)
lines(xyNormSD[,1], eigenVectorsSD[2,1]/eigenVectorsSD[1,1] * xyNormSD[,1])
lines(xyNormSD[,1], eigenVectorsSD[2,2]/eigenVectorsSD[1,2] * xyNormSD[,1])
